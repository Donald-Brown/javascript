.     any one character
\d    any digit from 0 to 9
\w    any word character (a-z,A-Z,0-9)
\W    any non-word character
\s    any whitespace character
      (tab, new line, form feed, end of line, carriage return)
\S    any non whitespace character
^     beginning of line
$     end of line
\b    word boundary
\B    a non word boundary
?         appearing once or not at all
*         appearing zero or more times
+         appearing one or more times
{min,max} appearing within the specified range

// Example
var r = /hello/;
var r2 = /^hello$/;
var r3 = /hello/g;
s = 'a string with hello in it to match needed another hello to show g flag.';

r.test(s);  // Evaluates to true
r2.test(s);  // Evaluates to false

s.match(r); // returns ["hello"]
s.match(r3); // returns ["hello", "hello"]

// Example
var t = some text with numbers

var r = /\d{3}[-.]\d{4}/g;
var matches = s.match(r);

for (var i=0; i<matches.length; i++) {
console.log(matches[i];
}

dont forget about exec
// example
var result = r.exec(s);

while (result != null) {
	console.log(result);
	result = r.exec(s);
}
////////////////////////////////////////////////////
var email = /\w+@\w+\.(net|com|edu|org)/;
if (email.test("daniel@shiffman.net")) {
  console.log("That's a valid e-mail!");
}

////////////////////////////////////////////////////
var zipcode = "My zip code is 90210";
var index = zipcode.search(/\d{5}/);
console.log("The zip code is at index: " + index);


/////////////////////////////////////////////////
var txt = "This is a test.";    // The String the search in
var regex = /test/;             // The regex  
var results = txt.match(regex); // Execute the search

[ 'test' ]
///////////////////////////////////////////////////
var txt = 'Phone numbers: 212-555-1234 and 917-555-4321 and 646.555.9876.';  
var regex = /(\d+)[-.]\d+[-.]\d+/;               
var results = txt.match(regex);

[ '212-555-1234', '212' ]
//////////////////////////////////////////////////
var txt = 'Phone numbers: 212-555-1234 and 917-555-4321 and 646.555.9876.';  
var regex = /(\d+)[-.]\d+[-.]\d+/g;               
var results = txt.match(regex);

["212-555-1234", "917-555-4321", "646.555.9876"]
///////////////////////////////////////////////////
var text = 'Phone numbers: 212-555-1234 and 917-555-4321 and 646.555.9876.';  
var regex = /(\d+)[-.]\d+[-.]\d+/g;               
var results = regex.exec(text);

while (results != null) {
  // do something with the matched results and then

  // Check again
  results = regex.exec(text);
}

//could also write as
while (var results = regex.exec(text)) {
  // do something with the matched results
}

////////////////////////////////////////////////////////////////////////////
Using split and replace

var text = "This text has characters, spaces, and some punctuation.";
// one or more non-word chars (anything not a-z0-9)
var regex = /\W+/;

var words = text.split(regex);
console.log('Total words: ' + words.length);

[ 'This',
  'text',
  'has',
  'characters',
  'spaces',
  'and',
  'some',
  'punctuation'
]

 With var regex = /(\W+)/
 
 [ 'This',
  ' ',
  'text',
  ' ',
  'has',
  ' ',
  'characters',
  ', ',
  'spaces',
  ', ',
  'and',
  ' ',
  'some',
  ' ',
  'punctuation',
  '.',
  '' ]
  
  // Replace
  
  var text = 'Replace every time the word "the" appears with the word ze.';

// \b is a word boundary
// You can think of this as an invisible boundary
// between a non-word character and a word character.
var regex = /\bthe\b/g;  
const result2 = regex.test('Hello');wels.";
var regex = /([aeiou]+)/g;
var replaced = text.replace(regex, '$1$1');

var txt = "This is some text with words of variable length."

var output = txt.replace(/\b[a-z]{4,6}\b/gi, replacer);

function replacer(match) {
  var len = match.length;
  // Four letter words become uppercase
  if (len == 4) {
    return match.toUpperCase();
  // Five letter words become "five"
  } else if (len == 5) {
    return "five";
  // Six letter words turn into today's date
  } else if (len == 6) {
    return Date();
  }
}

// Output should now read
THIS is SOME TEXT WITH five of variable Mon Sep 19 2016 13:59:22 GMT-0400 (EDT).
